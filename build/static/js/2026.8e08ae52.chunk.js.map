{"version":3,"file":"static/js/2026.8e08ae52.chunk.js","mappings":"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","sources":["components/modals/AddFaq.js","views/pages/lists/FaqsList.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCol,\n  CContainer,\n  CForm,\n  CFormInput,\n  CFormLabel,\n  CFormSelect,\n  CInputGroup,\n  CInputGroupText,\n  CFormTextarea,\n  CRow,\n  CModal,\n  CModalHeader,\n  CModalTitle,\n  CModalBody\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport { cilLockLocked, cilUser } from '@coreui/icons'\nimport Countries from '../../json/Countries.json'\nimport PropTypes from 'prop-types'\nimport { API, axiosInstance, isEmpty } from \"src/globalfunction\"\nimport { useNavigate } from \"react-router-dom\"\nimport ImageShow from \"../ImageShow\"\nconst AddFaq = ({ isshowform, onClose, data }) => {\n  // const location = useLocation();\n  console.log(\"addnew 00000000000000000000\", data)\n  const navigate = useNavigate()\n  const [gymvalue, setGymValue] = useState()\n  const [gymlist, setGymlist] = useState()\n  const [question, setQuestion] = useState(data?.question)\n  const [answer, setAnswer] = useState(data?.answer)\n\n\n  useEffect(() => {\n    onLoad()\n  }, [])\n  const onLoad = () => {\n    axiosInstance.get('v1.0/gymcenter/gym-all-data').then(res => {\n      if (res.data.status) {\n        setGymlist(res.data.data)\n      }\n    })\n\n  }\n  const onAddFAQ = () => {\n    let body = {\n      gymcenterid: gymvalue,\n      question: question,\n      answer: answer\n    }\n\n    axiosInstance.post('v1.0/faqs/add-faqs', body).then(res => {\n\n      if (res.data.status) {\n        alert(\"Successfully Added\")\n        onClose()\n      }\n      else {\n        alert(res.data.data.message)\n      }\n    })\n  }\n  const onUpdate = () => {\n    let body = {\n      _id: data?._id,\n      question: question,\n      answer: answer\n    }\n    axiosInstance.put('v1.0/faqs/update-faqs', body).then(res => {\n      console.log('ddd', res.data)\n      if (res.data?.status) {\n        alert(res.data?.message)\n      }\n\n    }).catch(err => {\n      alert(\"Something went wrong\")\n      console.log(\"error\", err)\n    })\n  }\n\n\n\n\n\n  return (\n    <CModal fullscreen=\"md\" visible={isshowform}\n      onClose={() => onClose()}>\n      <CModalHeader>\n        <CModalTitle>{!isEmpty(data?._id) ? 'Update  Details' : 'Add Details '}</CModalTitle>\n      </CModalHeader>\n      <CModalBody className=\"px-4 py-3 border mx-4 my-3 modal-shadow rounded\">\n\n        <p className=\"text-medium-emphasis\">{`${isEmpty(data?._id) ? \"Create\" : \"Update\"} your  account`}</p>\n\n        <CContainer>\n          <CRow className=\"justify-content-center\">\n            {/* <CCol md={9} lg={7} xl={6}> */}\n            <CCol className=\"px-0\">\n              {/* <CCard className=\"mx-4\">\n                <CCardBody className=\"p-4\">\n                  <CForm> */}\n                    {/* <h1>FAQ Form</h1> */}\n\n                    <CInputGroup className=\"mb-3\">\n                      <CInputGroupText>\n                        {/* <CIcon icon={cilUser} /> */}\n                        <i className=\"fa fa-question\"></i>\n                      </CInputGroupText>\n                      <CFormInput\n                        defaultValue={data?.question}\n                        value={question}\n                        onChange={(e) => setQuestion(e.target.value)}\n                        placeholder=\"Question\" autoComplete=\"question\"\n                      />\n                    </CInputGroup>\n\n\n                    {/* answer */}\n                    <CInputGroup className=\"mb-3\">\n                      <CInputGroupText>\n                        {/* <CIcon icon={cilUser} /> */}\n                        <i className=\"fa fa-list-alt\"></i>\n                      </CInputGroupText>\n                      <CFormTextarea\n                        defaultValue={data?.answer}\n                        value={answer}\n                        onChange={(e) => setAnswer(e.target.value)}\n                        placeholder=\"Answer\" autoComplete=\"answer\"\n                      />\n                      {/* <CFormInput\n                     value={answer}\n                   onChange={(e) => setAnswer(e.target.value)}\n                    placeholder=\"Answer\" autoComplete=\"answer\" /> */}\n                    </CInputGroup>\n\n                    <div className=\"d-grid\"\n                      onClick={() => data?._id ? onUpdate() : onAddFAQ()}>\n                      <CButton className=\"update_btn\">{data?._id ? \"Update\" : \"Add Faq\"}</CButton>\n                    </div>\n\n                  {/* </CForm>\n                </CCardBody>\n              </CCard> */}\n            </CCol>\n          </CRow>\n        </CContainer>\n\n      </CModalBody>\n    </CModal>\n  )\n}\nexport default AddFaq\nAddFaq.propTypes = {\n  isshowform: PropTypes.bool,\n  onClose: PropTypes.func,\n  data: PropTypes.object\n};\n\n","\nimport {\n  CTable,\n  CTableHead,\n  CTableRow,\n  CTableHeaderCell,\n  CTableBody,\n  CTableDataCell,\n  CButton,\n  CFormInput,\n  CImage,\n  CRow,\n  CCol\n} from '@coreui/react'\nimport axios from 'axios';\nimport React, { useState, useEffect } from \"react\";\nimport ImageShow from 'src/components/ImageShow';\nimport { API, axiosInstance, fetchImage } from 'src/globalfunction';\nimport { useNavigate, useParams, useLocation } from \"react-router-dom\"\nimport AddFaq from 'src/components/modals/AddFaq';\nimport * as Images from '../../../assets';\n\nconst FaqsList = () => {\n  const [faqlist, setFaqlist] = useState()\n  const [selectdata, setSelectdata] = useState()\n  const navigate = useNavigate()\n  const [isshowform, setIsshowform] = useState()\n  const onLoad = () => {\n    API.get('v1.0/faqs/get-faqs_withoutcenterid').then(res => {\n      if (res.data.status) {\n        setFaqlist(res.data.data)\n      }\n    }).catch(err => {    \n        navigate('404')\n  \n      console.log(\"Error\", err)\n  \n      alert(\"Something went wrong\")\n    })\n  }\n\n\n  useEffect(() => {\n    onLoad()\n  }, [])\n\n  const onUpdate = (items) => {\n    //  navigate('/faq',{state:items})\n    setSelectdata(items)\n    setIsshowform(true)\n  }\n  const onDelete = (faqid) => {\n\n    axiosInstance.delete(`v1.0/faqs/delete-faq/${faqid}`).then(res => {\n      if (res.data.status) {\n        alert(res.data.message)\n        onLoad()\n      }\n    })\n  }\n\n\n  return (\n    <div className=\"table-responsive\">\n      <AddFaq\n        isshowform={isshowform} onClose={() => setIsshowform(false)} data={selectdata} />\n\n      <div onClick={() => setIsshowform(true)} className='button-1'>\n        {\"+ Add New\"}\n      </div>\n      <CTable>\n        <CTableHead>\n          <CTableRow>\n            <CTableHeaderCell scope=\"col\" className='fw-bold'>#</CTableHeaderCell>\n            {/* <CTableHeaderCell scope=\"col\">{\"_id\"}</CTableHeaderCell> */}\n            <CTableHeaderCell scope=\"col\" className='fw-bold'>{\"Question\"}</CTableHeaderCell>\n            <CTableHeaderCell scope=\"col\" className='fw-bold'>{\"Answer\"}</CTableHeaderCell>\n            <CTableHeaderCell scope=\"col\" className='fw-bold'>{\"Action\"}</CTableHeaderCell>\n          </CTableRow>\n        </CTableHead>\n        <CTableBody className='body-divider'>\n          {faqlist?.length > 0 && (faqlist?.map((items, index) => (\n            <CTableRow key={index}>\n              <CTableHeaderCell scope=\"row\">{index + 1}</CTableHeaderCell>\n              {/* <CTableDataCell>{items?._id}</CTableDataCell> */}\n\n              <CTableDataCell>{items?.question}</CTableDataCell>\n              <CTableDataCell>{items?.answer.substring(0, 100)}</CTableDataCell>\n              <CTableDataCell>\n                <CRow>\n                  <CCol onClick={() => onUpdate(items)}>\n                    <CImage\n\n                      rounded\n                      src={Images.user_icon}\n\n                      className=\"icons\"\n                    />\n                  </CCol>\n                  <CCol onClick={() => onDelete(items?._id)}>\n                    <CImage\n\n                      rounded\n                      src={Images.delete_icon}\n\n                      className=\"icons\"\n                    />\n                  </CCol>\n                </CRow>\n\n              </CTableDataCell>\n\n            </CTableRow>\n\n          )))}\n        </CTableBody>\n      </CTable>\n    </div>\n  )\n}\nexport default FaqsList"],"names":["_ref","isshowform","onClose","data","console","log","useNavigate","_useState","useState","_useState2","_slicedToArray","gymvalue","_useState3","_useState4","setGymlist","_useState5","question","_useState6","setQuestion","_useState7","answer","_useState8","setAnswer","useEffect","onLoad","axiosInstance","then","res","status","_jsxs","CModal","fullscreen","visible","children","_jsx","CModalHeader","CModalTitle","isEmpty","_id","CModalBody","className","concat","CContainer","CRow","CCol","CInputGroup","CInputGroupText","CFormInput","defaultValue","value","onChange","e","target","placeholder","autoComplete","CFormTextarea","onClick","body","_res$data","_res$data2","alert","message","catch","err","onUpdate","gymcenterid","onAddFAQ","CButton","faqlist","setFaqlist","selectdata","setSelectdata","navigate","setIsshowform","API","AddFaq","CTable","CTableHead","CTableRow","CTableHeaderCell","scope","CTableBody","length","map","items","index","CTableDataCell","substring","CImage","rounded","src","Images","faqid"],"sourceRoot":""}