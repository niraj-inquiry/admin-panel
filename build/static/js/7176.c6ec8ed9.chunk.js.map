{"version":3,"file":"static/js/7176.c6ec8ed9.chunk.js","mappings":"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","sources":["views/pages/forms/Register.js","../node_modules/@coreui/icons/src/free/cil-envelope-closed.ts"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCol,\n  CContainer,\n  CForm,\n  CFormInput,\n  CFormLabel,\n  CFormSelect,\n  CInputGroup,\n  CInputGroupText,\n  CRow,\n  CImage,\n  CAlert,\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport { cilLockLocked, cilUser, cilEnvelopeClosed, cilBurn } from '@coreui/icons'\nimport { useNavigate, useParams, useLocation } from \"react-router-dom\"\nimport { API, axiosInstance, isEmpty } from 'src/globalfunction'\nimport axios from 'axios';\nimport * as Images from \"../../../assets\";\n\nconst Register = () => {\n  const genderlist = [\"Male\", \"Female\"]\n  const usertypelist = [{ _di: \"1\", rolename: \"admin\" }, { _di: \"2\", rolename: \"superadmin\" }]\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const [first_name, setFirst_name] = useState()\n\n  const [last_name, setLast_name] = useState()\n  const [email, setEmail] = useState()\n\n  const [password, setPassword] = useState()\n\n  const [post_code, setPost_code] = useState()\n  const [description, setDescription] = useState()\n  const [user_type, setUser_type] = useState()\n  const [gender, setGender] = useState()\n  const [image, setImage] = useState()\n  const [userTypelist, setUserTypelist] = useState();\n  const [allemptyfield, setAllemptyfield] = useState(false)\n\n  const onCreateAccount = async () => {\n    if (!isEmpty(first_name) && \n      !isEmpty(email) && !isEmpty(password) && !isEmpty(post_code)\n      &&\n      !isEmpty(description) && !isEmpty(user_type) && !isEmpty(gender)\n    ) {\n      const formdata = new FormData()\n\n      formdata.append(\"first_name\", first_name);\n      formdata.append(\"last_name\", last_name);\n      formdata.append(\"email\", email);\n      formdata.append(\"password\", password);\n      formdata.append(\"post_code\", post_code);\n      formdata.append(\"description\", description);\n      formdata.append(\"user_type\", user_type);\n      formdata.append(\"gender\", gender);\n      formdata.append(\"image\", image);\n      await API.post('v1.0/user/register', formdata).then(res => {\n        console.log(\"user\", res.data.data)\n        if (res?.data?.status === true) {\n          setAllemptyfield(false)\n          alert(res?.data?.message)\n          // navigate('/lists/userslist')\n          if((res.data.data.user_type).toLowerCase()==='admin'||(res.data.data.user_type).toLowerCase()==='superadmin')\n          {\n           navigate('dashboard')\n         }\n         else{\n           alert(\"Invalid user\")\n         }\n        }\n        setAllemptyfield(true)\n      })\n\n\n    }\n    else {\n      alert(\"Missing field\");\n      setAllemptyfield(true)\n\n    }\n  }\n\n  const onLoad = () => {\n    API.get('v1.0/role/get-role').then(res => {\n\n      if (res.data.status) {\n        setUserTypelist(res.data.data)\n      }\n      else {\n        setUserTypelist(usertypelist)\n      }\n    })\n  }\n\n  useEffect(() => {\n\n    onLoad()\n  }, [])\n  return (\n    <div className=\"min-vh-100 d-flex flex-row align-items-center register\"\n      style={{\n        backgroundImage: `url(${Images.registration})`,\n      }}\n    >\n      <CContainer className='ms-0'>\n        <CRow className=\"justify-content-start\">\n          <CCol md={9} lg={7} xl={6}>\n            <CCard className=\"mx-4\">\n              <CCardBody className=\"p-4 register-box\">\n                <CContainer className='login-img my-2'>\n                  <CImage rounded src={Images.logo} width={300} height={300} className='login-logo' />\n                </CContainer>\n                <CForm className='text-center'>\n                  <h3 className='m-4'>Register</h3>\n                  {/* <p className=\"text-medium-emphasis\">Create your account</p> */}\n\n\n                  <CRow>\n                    <CCol>\n                      {/* First name */}\n                      <CInputGroup className=\"mb-3\">\n                        <CInputGroupText>\n                          <CIcon icon={cilUser} />\n                        </CInputGroupText>\n                        <CFormInput\n                          onChange={(e) => setFirst_name(e.target.value)}\n                          placeholder=\"First Name\" autoComplete=\"firstname\" />\n                      </CInputGroup>\n                    </CCol>\n                    \n                    <CCol>\n                      {/* Last name */}\n                      <CInputGroup className=\"mb-3\">\n                        <CInputGroupText>\n                          <CIcon icon={cilUser} />\n                        </CInputGroupText>\n                        <CFormInput\n                          onChange={(e) => setLast_name(e.target.value)}\n                          placeholder=\"Last Name\" autoComplete=\"lastname\" />\n                      </CInputGroup>\n                    </CCol>\n                  </CRow>\n\n                  <CRow>\n                    <CCol>\n                      {/*email  */}\n                      <CInputGroup className=\"mb-3\">\n                        <CInputGroupText> <CIcon icon={cilEnvelopeClosed} /></CInputGroupText>\n                        <CFormInput\n                        type=\"email\"\n                          onChange={(e) => setEmail(e.target.value)}\n                          placeholder=\"Email\" autoComplete=\"email\" />\n                      </CInputGroup>\n                    </CCol>\n                    \n                    <CCol>\n                      {/*email  password*/}\n                      <CInputGroup className=\"mb-3\">\n                        <CInputGroupText>\n                          <CIcon icon={cilLockLocked} />\n                        </CInputGroupText>\n                        <CFormInput\n                          onChange={(e) => setPassword(e.target.value)}\n                          type=\"password\"\n                          placeholder=\"Password\"\n                          autoComplete=\"new-password\"\n                        />\n                      </CInputGroup>\n                    </CCol>\n                  </CRow>\n\n                  <CRow>\n                    <CCol>\n                      {/*post_code  */}\n                      <CInputGroup className=\"mb-3\">\n                        {/* <CInputGroupText>@</CInputGroupText> */}\n                        <CFormInput\n                        type=\"number\"\n                          onChange={(e) => setPost_code(e.target.value)}\n                          placeholder=\"Post code\" autoComplete=\"post_code\" />\n                      </CInputGroup>\n                    </CCol>\n                    <CCol>\n                      {/*user_type*/}\n                      <CInputGroup className=\"mb-3\">\n                        {/* <CInputGroupText>@</CInputGroupText> */}\n\n                        <CFormSelect id=\"user_type\" onChange={(e) => setUser_type(e.target.value)}>\n                          <option>Choose UserType...</option>\n                          {userTypelist?.map((item) => (\n                            <option key={item?.rolename}>{item?.rolename}</option>\n                          ))}\n                        </CFormSelect>\n                      </CInputGroup>\n                    </CCol>\n                    <CCol>\n                      {/*gender  */}\n                      <CInputGroup className=\"mb-3\">\n                        {/* <CInputGroupText>@</CInputGroupText> */}\n\n                        <CFormSelect id=\"gender\" onChange={(e) => setGender(e.target.value)}>\n                          <option>Choose Gender...</option>\n                          {genderlist?.map((item) => (\n                            <option key={item}>{item}</option>\n                          ))}\n                        </CFormSelect>\n                      </CInputGroup>\n                    </CCol>\n                  </CRow>\n\n                  {/*description  */}\n                  <CInputGroup className=\"mb-3\">\n                    <CInputGroupText>@</CInputGroupText>\n                    <CFormInput\n                      onChange={(e) => setDescription(e.target.value)}\n                      placeholder=\"Description\" autoComplete=\"description\" />\n                  </CInputGroup>\n\n\n\n                  {/*image*/}\n                  <CInputGroup className=\"mb-3\">\n                    {/* <CInputGroupText>\n                      *\n                    </CInputGroupText> */}\n                    <CFormInput\n                      onChange={(event) => {\n                        setImage(event.target.files[0]);\n                      }}\n                      type=\"file\"\n                      accept=\"image/*\"\n                      placeholder=\"Please Enter your image\"\n                    />\n                  </CInputGroup>\n\n                  {allemptyfield && (\n                    <CAlert color=\"danger\" className=\"d-flex align-items-center px-1 py-2\">\n                      <CIcon icon={cilBurn} className=\"flex-shrink-0 me-2\" width={24} height={24} />\n                      <div>Please enter all the fields</div>\n                    </CAlert>\n                  )\n                  }\n\n                  <div className=\"d-grid\" onClick={() => onCreateAccount()}>\n                    <CButton className=\"login-btn border border-0 fw-bold\" style={{ backgroundColor: '#ff5721' }} >\n                      Create Account\n                    </CButton>\n                  </div>\n                </CForm>\n              </CCardBody>\n            </CCard>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n  )\n}\n\nexport default Register\n","export var cilEnvelopeClosed = [\"512 512\", \"<path fill='var(--ci-primary-color, currentColor)' d='M16,112V496H496V112ZM236.8,341.6a32.167,32.167,0,0,0,38.4,0L298.667,324,464,448v16H48V448L213.333,324ZM256,316,48,160V144H464v16ZM48,200,186.667,304,48,408ZM464,408,325.333,304,464,200Z' class='ci-primary'/>\"];\n"],"names":["genderlist","usertypelist","_di","rolename","navigate","useNavigate","_useState","useLocation","useState","_useState2","_slicedToArray","first_name","setFirst_name","_useState3","_useState4","last_name","setLast_name","_useState5","_useState6","email","setEmail","_useState7","_useState8","password","setPassword","_useState9","_useState10","post_code","setPost_code","_useState11","_useState12","description","setDescription","_useState13","_useState14","user_type","setUser_type","_useState15","_useState16","gender","setGender","_useState17","_useState18","image","setImage","_useState19","_useState20","userTypelist","setUserTypelist","_useState21","_useState22","allemptyfield","setAllemptyfield","onCreateAccount","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","formdata","wrap","_context","prev","next","isEmpty","FormData","append","API","then","res","_res$data","_res$data2","console","log","data","status","alert","message","toLowerCase","stop","apply","arguments","useEffect","_jsx","className","style","backgroundImage","concat","Images","children","CContainer","CRow","CCol","md","lg","xl","CCard","_jsxs","CCardBody","CImage","rounded","src","width","height","CForm","CInputGroup","CInputGroupText","CIcon","icon","cilUser","CFormInput","onChange","e","target","value","placeholder","autoComplete","cilEnvelopeClosed","type","cilLockLocked","CFormSelect","id","map","item","event","files","accept","CAlert","color","cilBurn","onClick","CButton","backgroundColor"],"sourceRoot":""}